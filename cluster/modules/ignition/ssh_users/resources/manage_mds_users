#!/bin/bash  

# Name of the resource group, used to get the list of servers and the list of users
# It points at the folder in tsm project
CONFIG=$1
# Boolean to execute the update
EXEC=$2

TMPDIR="/tmp/checkerconfig"

# URL of TSM API
TSMURL="https://tsm.utility.valapp.com/api/v3/projects"
# Token for SRE bot
TOKEN="JydGE4gjKfu_EubVm2yp"
# ID of project to get keys and config files
PROJECTID="102"

# List of users not to be managed
SYSTEM_USERS=(core)
# Users already in system
EXISTING_USERS=()
# USers from configuration
CONFIGURED_USERS=()
# USers to be removed
REMOVED_USERS=()
# Users to be added
ADDED_USERS=()
# Unchanged users
UNCHANGED_USERS=()


SSHOPT="StrictHostKeyChecking no"

# Retrieve base64 content of a file for a given repository
function get_content {
  filepath=$2
  repository_id=$1
  # echo $(curl -s --request GET --header "PRIVATE-TOKEN: $TOKEN" "$TSMURL/$repository_id/repository/files?file_path=$filepath&ref=master")
  echo $(curl -s --request GET --header "PRIVATE-TOKEN: $TOKEN" "$TSMURL/$repository_id/repository/files?file_path=$filepath&ref=master" | jq .content)
}
# Decode content and write in a local file
function read_file {
  repository_id=$1
  filepath=$2
  target=$3
  echo $(get_content $repository_id $filepath) | base64 -di > $target
}

# Exceute update of the file. It must exist on the repository.
# Any commit is recorded even though there is no modification in the file
function exec_commit {
  URL="$TSMURL/$1/repository/commits"
  file=$2
  content=$3
  commit_msg="$4"
  PAYLOAD=$(cat << EOF
{
  "branch_name": "master",
  "commit_message": "$commit_msg",
  "actions": [
    {
      "action": "update",
      "file_path": "$file",
      "content": "$content",
      "encoding": "base64"
    }
  ]
}
EOF
)
  curl --request POST --header "PRIVATE-TOKEN: $TOKEN" --header "Content-Type: application/json" $URL --data "$PAYLOAD"
}

# Check the content of remote branch and local file, if diff, commit the difference
function commit_file {
  repository_id="$1"
  file="$2"
  target="$3"
  commit_msg="$4"
  encoded="$(cat $file | base64 --wrap 0)"
  distant="$(echo $(get_content $repository_id $target) )"

  if [[ ! "\"$encoded\"" == "$distant" ]]
  then
    echo "Modified report, commit"
    exec_commit "$repository_id" "$target" "$encoded" "$commit_msg"
  else
    echo "Unchanged report, skip"
  fi
}

# Retieve files from TSM and copy them on TMPDIR
function populate_config {
  # Retrieve the config files from TSM
  mkdir -p $TMPDIR
  read_file $PROJECTID "config/$CONFIG/servers.txt" "$TMPDIR/servers.txt"
  read_file $PROJECTID "config/$CONFIG/authorized_users.txt" "$TMPDIR/authorized_users.txt"
}

# Populate the arrays the arrays
function init {
  # Fill the existing users (who has a home dir)
  cd /home
  for existing_user in *
  do
    EXISTING_USERS+=($existing_user)
  done
  #Removing system users
  EXISTING_USERS=( "${EXISTING_USERS[@]/$SYSTEM_USERS}" )

  for user in $(cat $TMPDIR/authorized_users.txt)
  do
    if [[ ! "$user" =~ ^# ]]
    then
      # Get only the name, not the organisation
      CONFIGURED_USERS+=("${user##*/}")
    fi
  done

  # Now time to detect the differences between what exists
  # and what we want
  exists=" ${EXISTING_USERS[*]} "
  for u in ${CONFIGURED_USERS[@]}
  do
    if [[ ! $exists =~ " $u " ]]
    then
      ADDED_USERS+=($u)
    fi
  done

  configure=" ${CONFIGURED_USERS[*]} "
  for u in ${EXISTING_USERS[@]}
  do
    if [[ ! $configure =~ " $u " ]]
    then
      REMOVED_USERS+=($u)
    fi
  done

  # Unchanged users, to be sure about what we are doing
  changed=" ${ADDED_USERS[*]} ${REMOVED_USERS[*]} "
  for u in ${EXISTING_USERS[@]}
  do
    if [[ ! $changed =~ " $u " ]]
    then
      UNCHANGED_USERS+=($u)
    fi
  done

  echo -e "To be added : \e[32m${ADDED_USERS[*]}\e[0m"
  echo -e "To be removed : \e[31m${REMOVED_USERS[*]}\e[0m"
  echo Unchanged : ${UNCHANGED_USERS[*]}

  echo "${ADDED_USERS[*]}" > $TMPDIR/tobeadded
  echo "${REMOVED_USERS[*]}" > $TMPDIR/toberemoved
}

# Function expecting y/Y to continue, else, exit 1
function confirm {
  echo
  read -p "Are you sure? " -n 1 -r
  echo    # (optional) move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
      [[ "$0" = "$BASH_SOURCE" ]] && exit 1 || return 1 # handle exits from shell or function but don't exit interactive shell
  fi
}

# Delete a user in a distant server (arg 1)
function delete_user_on_server {
  echo -e "\e[31mRemoving $1 from $2...\e[0m"
  ssh -o "$SSHOPT" $SSHKEY $2 -- sudo userdel -r $1
}

# Delete a user in a distant server (arg 1)
function add_user_on_server {
  usr=$1
  svr=$2
  echo -e "\e[32mAdding $usr to $svr...\e[0m"
  # Retrieve public key from TSM
  read_file $PROJECTID "public_keys/$usr.pub" "$TMPDIR/$usr.pub"
  # Retrieve generic ssh config file
  read_file $PROJECTID "generic_ssh_config" "$TMPDIR/generic_ssh_config"
  # Copy to server
  scp -o "$SSHOPT" $SSHKEY $TMPDIR/$usr.pub $TMPDIR/generic_ssh_config $svr:/tmp
  ssh -o "$SSHOPT" $SSHKEY $svr << EOF
  sudo useradd -p '*' -U -m -G sudo,docker -s /bin/bash $usr
  sudo mkdir -p -m 700 /home/$usr/.ssh
  sudo mv /tmp/$user.pub /home/$usr/.ssh/authorized_keys
  sudo mv /tmp/generic_ssh_config /home/$usr/.ssh/config
  sudo chmod 600 /home/$usr/.ssh/authorized_keys
  sudo chmod 600 /home/$usr/.ssh/config
  sudo chown -R $usr:$usr /home/$usr/.ssh
EOF
}

# Write and commit report to CMB
function write_report {
  commit_file 103 "$TMPDIR/users_report.txt" "$CONFIG/users_report.txt" "Users analysis from $CONFIG"
}

################### MAIN ###################

# Retrieve the config
populate_config $CONFIG

# Fill the arrays
init | tee "$TMPDIR/users_report.txt"
write_report

function review_services {
  kl="/opt/kubernetes/bin/kubectl --kubeconfig=/etc/kubernetes/local_kube.yaml"
  notreadypods=$($kl get pods --all-namespaces -o json  | jq -r '.items[] | select(.status.phase != "Running" or ([ .status.conditions[] | select(.type == "Ready" and .state == false) ] | length ) == 1 ) | .metadata.namespace + "/" + .metadata.name')
  if [[ "x$notreadypods" != "x" ]]
  then echo "ALERT -- SOME PODS NOT READY -- "; echo "$notreadypods"
  else echo "      -- ALL PODS READY --"
  fi

  for server in $(cat $TMPDIR/servers.txt)
  do
  echo
  echo "*** $server ***"
  ssh -o "$SSHOPT" $SSHKEY $server -- "if sudo systemctl status update-engine.service | grep -i 'active: failed'; then echo '      -- OS UPDATE IS DISABLED --'; else echo 'ALERT -- OS UPDATE IS UP --'; fi"
  ssh -o "$SSHOPT" $SSHKEY $server -- "if sudo systemctl status kubelet | grep -i 'active: failed'; then echo 'ALERT -- KUBELET IS DISABLED --'; else echo '      -- KUBELET IS UP --'; fi"
  ssh -o "$SSHOPT" $SSHKEY $server -- "if sudo systemctl status docker | grep -i 'active: failed'; then echo 'ALERT -- DOCKER IS DOWN --'; else echo '      -- DOCKER IS UP --'; fi"
  size=$(ssh -o "$SSHOPT" $SSHKEY $server --  df -h | grep "/dev/sda9" |  awk '{print $5}')
  if (( ${size%\%} > 70 ))
    then echo -n "WARN  -- Partition / :"
    else echo -n "      -- Partition / :"
  fi
  echo $size

  if [[ $server == storekeeper* ]]; then
    size=$(ssh -o "$SSHOPT" $SSHKEY $server --  df -h | grep "/data/pgdata" |  awk '{print $5}')
    if (( ${size%\%} > 70 ))
      then echo -n "WARN  -- Partition /data/pgdata :"
      else echo -n "      -- Partition /data/pgdata :"
    fi
    echo $size
  fi
  done
}

# launch services review
review_services | tee $TMPDIR/review.txt
commit_file 103 "$TMPDIR/review.txt" "$CONFIG/machines_review.txt" "machines analysis from $CONFIG"

# Execute the update
if [ "$EXEC" = true ]
then
  # Wait for confirmation
  confirm

  # delete the users in all the configured servers
  for user in $(cat "$TMPDIR/toberemoved")
  do
    for server in $(cat $TMPDIR/servers.txt)
    do
      delete_user_on_server $user $server
    done
  done

  # add the users in all the configured servers
  for user in $(cat "$TMPDIR/tobeadded")
  do
    for server in $(cat $TMPDIR/servers.txt)
    do
      add_user_on_server $user $server
    done
  done
fi

# Clean tmpdir
rm -rf $TMPDIR

